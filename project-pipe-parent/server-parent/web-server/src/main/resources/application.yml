#debug: true
spring.profiles.active: dev

auth:
  cas.expire: 86400
  enterprise.expire: 86400

logging:
  config: classpath:log4j2-prod.xml
  
server:
  #port: 37773
  port: 36663
  servlet:
    #context-path: /pipe-server1
    context-path: /pipe-server
  undertow:
    accesslog:
      enabled: false
      rotate: true
      dir: /opt/smartwater/pipe/undertow
    io-threads: 2
    worker-threads: 256
    buffer-size: 1024
    direct-buffers: true

spring.servlet.multipart.max-file-size: 1MB
spring.servlet.multipart.max-request-size: 1MB

druid:
  datasource:
    name: pipe-server
    type: com.alibaba.druid.pool.DruidDataSource
    driver-class-name: com.mysql.cj.jdbc.Driver
    filters: stat
    maxActive: 200
    initialSize: 1
    maxWait: 30000
    minIdle: 1
    timeBetweenEvictionRunsMillis: 30000
    minEvictableIdleTimeMillis: 300000
    validationQuery: select 'x'
    testWhileIdle: true
    testOnBorrow: false
    testOnReturn: false
    poolPreparedStatements: true
    maxOpenPreparedStatements: 20

spring:
  application:
    #name: pipe-server1
    name: pipe-server
  cache:
    type: redis
    redis:
      time-to-live: 3600
#  jackson:
#    date-format: yyyy-MM-dd HH:mm:ss
      
mybatis:
  mapperLocations: classpath*:com/dotop/pipe/dao/**/*.xml,classpath*:com/dotop/pipe/auth/dao/**/*.xml,classpath*:com/dotop/pipe/data/report/dao/*.xml,classpath*:com/dotop/pipe/data/receiver/dao/*.xml
  configLocation: classpath:mybatis-config.xml
 
eureka:
  instance:
    prefer-ip-address: true
    lease-expiration-duration-in-seconds: 30
    lease-renewal-interval-in-seconds: 10
  client:
    registry-fetch-interval-seconds: 30
    registerWithEureka: true
    fetchRegistry: true

feign:
  httpclient:
    enabled: false
  okhttp:
    enabled: true
  hystrix: 
    enabled: true

ribbon:
  httpclient:
    enabled: false
  okhttp:
    enabled: true
  eureka:
    enabled: true
  ReadTimeout: 10000
  ConnectTimeout: 10000
  MaxAutoRetries: 0
  MaxAutoRetriesNextServer: 1
  OkToRetryOnAllOperations: false
#  NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RandomRule #修改负载均衡算法

hystrix:
  threadpool:
    default:
      coreSize: 1000 
      maxQueueSize: 1000 
      queueSizeRejectionThreshold: 500
  command:
    default:
      execution:
        isolation:
          thread:
            timeoutInMilliseconds: 10000

flag:
  thirdFlag: false

email:
  username: "test1@qq.com"
  password: "123456"
  host: "mail.qq.com"
  port: "143"
  protocol: "imap"
  backAddress: "test2@qq.com"
  backDir: "D:\\mail\\"

#spring.cloud.loadbalancer.retry.enabled=true
#hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=10000
#hello-service.ribbon.ConnectTimeout=250
#hello-service.ribbon.ReadTimeout=1000
#hello-service.ribbon.OkToRetryOnAllOperations=true
#hello-service.ribbon.MaxAutoRetriesNextServer=2
#hello-service.ribbon.MaxAutoRetries=1

